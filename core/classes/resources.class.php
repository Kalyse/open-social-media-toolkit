<?phpclass resources {		var $db;	var $templateObj;			function resources(&$db=NULL) {		if (is_null($db)) { 			require_once('db.class.php');			$this->db=new cloudDatabase();		} else			$this->db=$db;	}		function buildLinksColumn() {		require_once(PATH_CORE.'/classes/template.class.php');		$this->templateObj=new template($this->db);		$this->templateObj->registerTemplates(MODULE_ACTIVE,'resources');		$cacheName='links';		if ($this->templateObj->checkCache($cacheName,60)) {			// still current, get from cache			$code=$this->templateObj->fetchCache($cacheName);		} else {					$code=$this->templateObj->templates['resourcePageTitle'];			$q=$this->db->queryC("SELECT * FROM Folders ORDER BY title ASC;");			$fldCnt=0;			$leftCnt=ceil($this->db->cnt/2);			$code.=$this->templateObj->templates['resourceHalfStart'];			$this->templateObj->db->setTemplateCallback('resourceImage', array($this, 'getResourceImage'), 'imageUrl');			while ($fData=$this->db->readQ($q)) {				$r=$this->templateObj->db->query("SELECT Folders.title as ftitle,FolderLinks.* FROM Folders,FolderLinks WHERE FolderLinks.folderid=$fData->folderid AND Folders.folderid=FolderLinks.folderid ORDER BY FolderLinks.title ASC ;");				$temp='';								while ($lData=mysql_fetch_array($r) ) {					if ($lData[imageUrl]<>'')						$temp.=$this->templateObj->processRow($lData,$this->templateObj->templates['resourceItemImage'],$this->templateObj->db->template_callbacks);					else						$temp.=$this->templateObj->processRow($lData,$this->templateObj->templates['resourceItemText'],$this->templateObj->db->template_callbacks);				}				$code.=$this->templateObj->miniMergeTemplate($this->templateObj->templates['resourceList'],$temp,$fData->title);				$fldCnt+=1;										if ($fldCnt>=$leftCnt) {					$code.=$this->templateObj->templates['resourceHalfEnd'].$this->templateObj->templates['resourceHalfStart'];				}			}			$code.=$this->templateObj->templates['resourceHalfEnd'];			// update amazon ids from newscloud affiliate			$code=str_replace('commonmediaor-20',AMAZON_ASSOCIATE_ID,$code);			$this->templateObj->cacheContent($cacheName,$code);		}		if (rand(0,1)==0)			$banner=$this->templateObj->templates['banner1']; // cbd		else			$banner=$this->templateObj->templates['banner2']; // quark				return $banner.$code;	}		function getResourceImage($url='') {		if ($url<>'') {			return '<img src="'.$url.'" alt="image" />'; // {title}		} else			return '';		}		function addFolder($folder) {		// check for duplicate		$chkDup=$this->db->queryC("SELECT folderid FROM Folders WHERE folderid=$folder->folderid;");		if (!$chkDup) {			// insert the folder into the table			$this_query=$this->db->insert("Folders","folderid,title","$folder->folderid,'$folder->title'");			$newId=$this->db->getId();			return $newId;			} else 			return false;				}		function addLink($link) {		// check for duplicate		$chkDup=$this->db->queryC("SELECT linkid FROM FolderLinks WHERE linkid='$link->linkid';");		if (!$chkDup) {			// insert the folder into the table			$this_query=$this->db->insert("FolderLinks","linkid,folderid,title,url,linkType,imageUrl,notes","$link->linkid,$link->folderid,'$link->title','$link->url','$link->linkType','$link->imageUrl','$link->notes'");			$newId=$this->db->getId();			return $newId;			} else 			return false;		}		function serializeFolder($id=0,$folderid=0,$title='') {		// creates an object for an action		$data= new stdClass;		if ($id<>0) $data->id=$id;		$data->folderid=$folderid;		$data->title=$title;		return $data;	}		function serializeLink($id=0,$folderid=0,$linkid=0,$title='',$url='',$linkType='',$imageUrl='',$notes='') {		// creates an object for an action		$data= new stdClass;		if ($id<>0) $data->id=$id;		$data->linkid=$linkid;		$data->folderid=$folderid; // containing folder		$data->title=$title;		$data->url=$url;		$data->linkType=$linkType;		$data->imageUrl=$imageUrl;		$data->notes=$notes;		return $data;	}	function sync($serResources) {		$resources=unserialize($serResources);		foreach ($resources as $folder) {			$folderData=$this->serializeFolder(0,$folder->id,$folder->title);			$this->addFolder($folderData);			foreach ($folder->links as $link) {				$linkData=$this->serializeLink(0,$folder->id,$link->id,$link->title,$link->url,$link->linkType,$link->imageUrl,$link->notes);						$this->addLink($linkData);			}					}	}				}	?>