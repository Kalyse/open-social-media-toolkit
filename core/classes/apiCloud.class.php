<?php/* 	apiCloud	The local API handler for making remote calls to the NewsCloud server*/class apiCloud {		var $version=0.1; 	// early alpha version	var $db;	var $apiKey; // your api key - get it from http://www.newscloud.com/accounts/api	var $auth_session;	var $userAgent;	var $apiNode;	var $final;		function apiCloud(&$db=NULL,$apiKey) {		if (is_null($db)) { 			require_once(PATH_CORE.'/classes/db.class.php');			$this->db=new cloudDatabase();		} else			$this->db=&$db;		$this->apiKey=$apiKey;		$this->userAgent=URL_HOME;		$this->apiNode=URL_SMT_NODE;	}	function syncProperties($groupid=0) {		return $this->callService('syncProperties&groupid='.$groupid);			}	function syncAnnouncements($groupid=0) {		return $this->callService('syncAnnouncements&groupid='.$groupid);			}	function syncNewswire($groupid=0,$timestamp=0) {		return $this->callService('syncNewswire&groupid='.$groupid.'&timestamp='.$timestamp);			}			function syncContent($groupid=0,$timestamp=0) {		return $this->callService('syncContent&groupid='.$groupid.'&timestamp='.$timestamp);	}	function syncComments($groupid=0,$idList,$timestamp=0) {		$idList=rawurlencode($idList);		 return $this->callService('syncComments&groupid='.$groupid.'&idList='.$idList.'&timestamp='.$timestamp);	}		function syncScores($groupid=0,$idList,$timestamp=0) {		$idList=rawurlencode($idList);		return $this->callService('syncScores&groupid='.$groupid.'&idList='.$idList.'&timestamp='.$timestamp);	}	function syncResources($groupid=0,$timestamp=0) {		return $this->callService('syncResources&groupid='.$groupid.'&timestamp='.$timestamp);	}	function syncFeedList($groupid=0,$timestamp=0) {		return $this->callService('syncFeedList&groupid='.$groupid.'&timestamp='.$timestamp);	}	function userCheckMemberName($groupid=0,$memberName='') {		$memberName=rawurlencode($memberName);		return $this->callService('userCheckMemberName&groupid='.$groupid.'&memberName='.$memberName);	}	function sendVerifyEmailRequest($groupid=0,$email='',$partnerid=0) {				$email=rawurlencode($email);		return $this->callService('sendVerifyEmailRequest&groupid='.$groupid.'&email='.$email.'&partnerid='.$partnerid);			}	function verifyRemoteEmailRequest($groupid=0,$email='',$actCode='') {		$email=rawurlencode($email);		$actCode=rawurlencode($actCode);		return $this->callService('verifyRemoteEmailRequest&groupid='.$groupid.'&email='.$email.'&actCode='.$actCode);	}		function userCreateAccount($groupid=0,$email='',$memberName='',$password='',$partnerid=0,$partnerUid=0,$partnerMemberName='',$validEmail='',$isTest='true') {		$email=rawurlencode($email);		$memberName=rawurlencode($memberName);		$password=rawurlencode($password);		$partnerMemberName=rawurlencode($partnerMemberName);		$validEmail=rawurlencode($validEmail);		if ($validEmail=='true') 			$validEmailStr='&validEmail';		 else			$validEmailStr='';		$isTest=$this->makeIsTestStr($isTest);						return $this->callService('userCreateAccount&groupid='.$groupid.'&email='.$email.'&memberName='.$memberName.'&password='.$password.'&partnerid='.$partnerid.'&partneruid='.$partneruid.'&partnerMemberName='.$partnerMemberName.'&isTest='.$isTest.$validEmailStr);			}	function requestSyncLog($groupid=0,$remoteUrl='',$timestamp=0) {		return $this->callService('requestSyncLog&groupid='.$groupid.'&remoteUrl='.$remoteUrl.'&timestamp='.$timestamp);	}	function validateLogin($groupid=0,$email='',$password='') {		return $this->callService('validateLogin&groupid='.$groupid.'&email='.$email.'&password='.$password);	}	function verifyActivation($groupid=0,$email='',$actCode='') {		$email=rawurlencode($email);		$actCode=rawurlencode($actCode);		return $this->callService('verifyActivation&groupid='.$groupid.'&email='.$email.'&actCode='.$actCode);	}					function partnerRegister($groupid=0,$domain='',$siteName='') {		$domain=rawurlencode($domain);		$siteName=rawurlencode($siteName);		return $this->callService('partnerRegister&groupid='.$groupid.'&domain='.$domain.'&siteName='.$siteName);	}					/**********************************************************/	/* Web service internals */	/**********************************************************/		function callService($methodCall) {		// PHP 4 version requires PEAR 		//		require_once "HTTP/Request.php";		//		$req =& new HTTP_Request($this->apiNode.'?apikey='.rawurlencode($this->apiKey).'&method='.$methodCall);		//		$req->addHeader("User-Agent", $this->userAgent);		//		$response = $req->sendRequest();		try {			$handle = fopen($this->apiNode.'?v='.rawurlencode($this->version).'&apikey='.rawurlencode($this->apiKey).'&method='.$methodCall.'&cloudid='.SITE_CLOUDID, "rb");			$resp = stream_get_contents($handle);			/*	PHP 4.x version			$resp = '';			while (!feof($handle)) {			  $resp .= fread($handle, 8192);			}			*/			fclose($handle);		} catch (Exception $e) {			echo 'Caught exception: ',  $e->getMessage(), "\n";			return false;		}//		if (PEAR::isError($response)) {//			return FALSE;//		} else {			// $resp=$req->getResponseBody();			require_once('xml.php');			$xml_parser = new xml(false, true, true);			$parsed_response = $xml_parser->parse($resp);			$temp=new stdClass;			if ($parsed_response['response']['result']=='ok')				$temp->result=true;			else {				$temp->result=false;				$temp->message=$parsed_response['response']['message'];				$this->db->log('API error: '.$methodCall.' returned '.$temp->message);			}			$temp->response=$parsed_response['response'];			$this->final=array();			$callback[] = &$this;			$callback[] = 'walkCallback';						if (!is_array($parsed_response['response']))				$this->db->log('API warning: no array from '.$methodCall);						array_walk($parsed_response['response'], $callback);				return $this->final;//		}			}	function walkCallback(&$val,$key,$index=0) {		// take the array from the xml parser and clean it up		// and put single item results into an array just like multi-item results		if (is_array($val)) {		 	if ($key<>'_attributes') {			 	if (is_numeric($key)) {			 		$index=$key;				 	} else 			 		$index=0;				$callback[] = &$this;			 	$callback[] = 'walkcallback';					array_walk($val,$callback,$index);			}		} else {			if ($key<>'_value' AND $key<>'_name') {				switch ($key) {					case 'result':						if ($val=='ok')							$this->final[result]=true;						else							$this->final[result]=false;					break;					case 'count':					case 'message':						$this->final[$key]=$val;					break;					default:						$this->final[items][$index][$key]=$val;					break;				}		   				   	}		}	}	/* Optional function you can use to convert array results to an object */	function convertToObject($arg_array) {		// from http://www.phpfreaks.com/quickcode/Array-to-Object/541.php	    $tmp = new stdClass; // start off a new (empty) object	    foreach ($arg_array as $key => $value) {			if ($key<>'_name' AND $key<>'_attributes' AND $key<>'_value') {				if (is_numeric($key)) $key='a'.$key;		        if (is_array($value)) { // if its multi-dimentional, keep going :)		            $tmp->$key = $this->convertToObject($value);		        } else {		            if (is_numeric($key)) { // can't do it with numbers :(		                die("Cannot turn numeric arrays into objects!");		            }		            $tmp->$key = $value;		        }	        }	    }	    return $tmp; // return the object!	} 	function makeIsTestStr($isTest) {		if ($isTest=='true' OR $isTest) 			$isTest='true';		else			$isTest='false';		return $isTest;	}			}	?>