<?phpdefine ("LENGTH_LONG_CAPTION",500);require_once(PATH_CORE.'/classes/dbRowObject.class.php');class Feeds extends dbRowObject  { }		class FeedsTable{		///////////////////////////////////////////////////////////////////////////////////////////////////////	// standard table fields	var $db;		static $tablename="Feeds";	static $idname = "id";	static $idtype = "INT(11) unsigned NOT NULL auto_increment";	static $dbRowObjectClass = "Feeds";			static $fields = array(				"wireid" => 	"INT(11) default 0", // deprecated, used to be used to sync to NC		"title" => 			"VARCHAR(255) default ''",		"url" => 			"VARCHAR(255) default ''",		"rss" => 			"VARCHAR(255) default ''",		"lastFetch" => 		"timestamp",		"feedType" => 	"ENUM ('blog','wire','images','miniblog','bookmarks','allowed','localBlog') default 'wire'", 		// allowed feeds can be matched against, but arent imported e.g. a feed you want to have occasional stories from but not read their feed		"specialType" => 	"ENUM ('flickrContent','default') default 'default'",		"loadOptions" => 	"ENUM ('all','matches','none') default 'none'", // options to load into content table		"userid" => 	"BIGINT(20) default 0", // used for listing the posted owner		"tagList" => 			"VARCHAR(255) default ''" // list of tags to apply to this feed		 // specialType - flickrContent - medium image we want is embedded in content, enclosure has original size image (too large)	);	static $keydefinitions = array(); 			///////////////////////////////////////////////////////////////////////////////////////////////////////	// standard table functions	function __construct(&$db=NULL) 	{		if (is_null($db)) 		{ 			require_once(PATH_CORE.'/classes/db.class.php');			$this->db=new cloudDatabase();		} else			$this->db=$db;			}		// although many functions will be duplicated between table subclasses, having a parent class gets too messy		function getRowObject()	{			$classname = self::$dbRowObjectClass; 		return new $classname($this->db, self::$tablename, array_keys(self::$fields), self::$idname);	}				// generic table creation routine, same for all *Table classes 			static function createTable($manageObj)	{					$manageObj->addTable(self::$tablename,self::$idname,self::$idtype,"MyISAM");		foreach (array_keys(self::$fields) as $key)		{			$manageObj->updateAddColumn(self::$tablename,$key,self::$fields[$key]);		}		foreach (self::$keydefinitions as $keydef)		{			$manageObj->updateAddKey(self::$tablename,$keydef[0], $keydef[1], $keydef[2], $keydef[3]);		}			}	};		class FeedMedia extends dbRowObject  { }		class FeedMediaTable{		///////////////////////////////////////////////////////////////////////////////////////////////////////	// standard table fields	var $db;		static $tablename="FeedMedia";	static $idname = "id";	static $idtype = "INT(11) unsigned NOT NULL auto_increment";	static $dbRowObjectClass = "FeedMedia";			static $fields = array(				"title" => 			"VARCHAR(255) default ''",		"previewImageUrl" => 			"VARCHAR(255) default ''",		// small image		"imageUrl" => 			"VARCHAR(255) default ''", // large image		"linkUrl" => 			"VARCHAR(255) default ''",		"author" => 			"VARCHAR(99) default ''",		"caption" => 			"TEXT default NULL",		"isFeatured" => 			"TINYINT(1) default 0",		"numLikes" 		=> "INT(4) default 0",		"numComments" 		=> "INT(4) default 0",		"mediaType" => 	"ENUM ('image','video') default 'image'"	,			"feedid" => 	"INT(11) default 0", // which wire it's from		"fbId" => "BIGINT(20) unsigned default 0", // who posted it		"t" => 		"timestamp"	);	static $keydefinitions = array(); 			///////////////////////////////////////////////////////////////////////////////////////////////////////	// standard table functions	function __construct(&$db=NULL) 	{		if (is_null($db)) 		{ 			require_once(PATH_CORE.'/classes/db.class.php');			$this->db=new cloudDatabase();		} else			$this->db=$db;			}		// although many functions will be duplicated between table subclasses, having a parent class gets too messy		function getRowObject()	{			$classname = self::$dbRowObjectClass; 		return new $classname($this->db, self::$tablename, array_keys(self::$fields), self::$idname);	}				// generic table creation routine, same for all *Table classes 			static function createTable($manageObj)	{					$manageObj->addTable(self::$tablename,self::$idname,self::$idtype,"MyISAM");		foreach (array_keys(self::$fields) as $key)		{			$manageObj->updateAddColumn(self::$tablename,$key,self::$fields[$key]);		}		foreach (self::$keydefinitions as $keydef)		{			$manageObj->updateAddKey(self::$tablename,$keydef[0], $keydef[1], $keydef[2], $keydef[3]);		}			}		function isDup($linkUrl='',$imageUrl='') {		if ($this->db->queryC("SELECT id FROM FeedMedia WHERE (linkUrl='$linkUrl' AND linkUrl<>'') OR (imageUrl='$imageUrl' AND imageUrl<>'');")===false) 			return false;		else			return true; // duplicate	}	};class feed {		var $db;	var $nwObj;	var $logObj;	var $psObj;	var $authorList;	var $feedDomainList=null; // sites feed domain list	var $newStoryLoaded=false;			function feed(&$db=NULL) {		if (is_null($db)) { 			require_once('db.class.php');			$this->db=new cloudDatabase();		} else			$this->db=$db;		// initialize objects		require_once(PATH_CORE.'/classes/parseStory.class.php');		$this->psObj = new parseStory();				}	function getFeed($id=0) {		$result=$this->db->query("SELECT * FROM Newswire WHERE id=$id;");		$info=$this->db->readQ($result);		return $info;		}	function add($feed) {		// check for duplicate		$chkDup=$this->db->queryC("SELECT id FROM Feeds WHERE rss='$feed->rss' OR wireid=$feed->wireid;");		if (!$chkDup) {			// insert the feed into the table			$this_query=$this->db->insert("Feeds","title,url,rss,wireid,feedType","'$feed->title','$feed->url','$feed->rss',$feed->wireid,'$feed->feedType'");			$newId=$this->db->getId();			return $newId;			} else 			return false;	}		function serialize($title='',$url='',$rss='',$wireid=0,$feedType='blog') {		// creates an object for an action		$data= new stdClass;		$data->title=$this->db->safe($title);				$data->url=$url;		$data->rss=$rss;				$data->wireid=$wireid;		$data->feedType=$feedType;		return $data;	}		function fetchImages() {		$this->authorList[]=array(); // track photographers and use one from each		$this_query=$this->db->query("SELECT * FROM Feeds WHERE feedType='images' AND lastFetch<date_sub(now(),INTERVAL 60 MINUTE) ORDER BY lastFetch ASC;");		while ($feed=$this->db->readQ($this_query)) {			echo $feed->title.' '.$feed->lastFetch.'<br />';			$this->simpleProcessFeed($feed,'FeedMedia');			$this->db->update("Feeds","lastFetch=date_sub(NOW(), INTERVAL (0-15) MINUTE)","id=$feed->id");		}									}		function fetchFeeds() {		require_once('newswire.class.php');		$this->nwObj=new newswire($this->db);		$this_query=$this->db->query("SELECT * FROM Feeds WHERE feedType='blog' OR feedType='localBlog' OR feedType='wire' AND lastFetch<date_sub(now(),INTERVAL 30 MINUTE) ORDER BY lastFetch ASC;");		while ($feed=$this->db->readQ($this_query)) {			echo $feed->title.'<br />';			$this->simpleProcessFeed($feed);			$this->db->update("Feeds","lastFetch=date_sub(NOW(), INTERVAL (0-15) MINUTE)","id=$feed->id");		}							}	function fetchBookmarks() {				$importLog=PATH_SERVER_LOGS.'import.log'; // for bookmarks		$this->db->log(SITE_TITLE,$importLog);		require_once('newswire.class.php');		$this->nwObj=new newswire($this->db);		$this_query=$this->db->query("SELECT * FROM Feeds WHERE feedType='bookmarks' AND lastFetch<date_sub(now(),INTERVAL 30 MINUTE) ORDER BY lastFetch ASC;");		while ($feed=$this->db->readQ($this_query)) {			echo $feed->title.'<br />';			$this->simpleProcessFeed($feed);			$this->db->update("Feeds","lastFetch=date_sub(NOW(), INTERVAL (0-15) MINUTE)","id=$feed->id");		}								$this->db->log('----- END ---- '.SITE_TITLE.'----',$importLog);	}	function simpleProcessFeed($feed=NULL,$target='newswire') {		$importLog=PATH_SERVER_LOGS.'import.log'; // for bookmarks		// process feed with simple pie		require_once PATH_CORE.'/utilities/simplepie.inc';		// Create a new instance of the SimplePie object		$sp = new SimplePie();		$sp->set_feed_url($feed->rss);		$sp->set_cache_location(PATH_CACHE);		$success = $sp->init();		$sp->handle_content_type();		if ($success) {						echo '<h2>'.$sp->get_title().'</h2><br />';			// set up a feedTime as a backup for feeds without dates in them			$spTime=time();			$cnt=0; // count headlines in feed								foreach ($sp->get_items() as $item) {				$spTime=$spTime-(60*15); // go fifteen minutes back for each feed item					 												// clean up brand labels				$itemTitle=$item->get_title();				$itemDescription=$item->get_content();				if ($author = $item->get_author())					{						$authorName=$author->get_name();					}else {						$authorName='';					}						// get the date				$itemDate=$item->get_date('Y-m-d H:i:s'); 				if ($itemDate=='') $itemDate=date('Y-m-d H:i:s',$spTime);				$itemLink=$item->get_permalink();								// skip open threads				if (stristr($itemTitle,'open thread')===FALSE) {						switch ($target) {						case 'newswire':							$feedItem=$this->nwObj->serialize($itemTitle,$itemDescription,$feed->title,$itemLink,$itemDate,$feed->wireid,$feed->feedType,$feed->id);							// load into newswire table							$id=$this->nwObj->add($feedItem);	// returns false on duplicate							if ($id!==false) {								echo 'insert '.$itemTitle.'<br>';								if ($enclosure = $item->get_enclosure())							    {								    // look up thumbnail								    switch ($spNotes) {								    	default:								    		// look for default image url								    		$mediaUrl=$this->db->safe($enclosure->link);									    	$imageUrl=$this->db->safe($enclosure->get_thumbnail());									    	$embed=$this->db->safe($enclosure->embed());									         print_r($mediaUrl);									         echo '<br />';									         print_r($imageUrl);									         echo '<br />';									         var_dump ($embed);							        									         echo '<br />';									         $this->db->update("Newswire","imageUrl='$imageUrl',mediaUrl='$mediaUrl',embed='$embed'","id=$id");								    	break;								    	case 'inlineImage':								    		// feeds like Countdown that embed the thumbnail incorrectly								    		$embed=$enclosure->native_embed();								    		$link=$this->parseLink($embed);									         $this->db->update("Newswire","imageUrl='$link'","id=$id");								    	break;									    }							    }								// for new items - check for loadOption								switch ($feed->loadOptions) {									default:										// none - do nothing									break;									case 'all':										// add story to content table										$this->loadStory($feedItem,$feed);									break;									case 'matches':																		// add story to content table if it matches one of our feeds										if (($feed->feedType=='bookmarks' AND ($this->checkMatches($feedItem) OR $this->checkKeywords($itemTitle,$itemDescription))!==false)) {																						$this->db->log('IMPORT:'.$itemTitle,$importLog);											$this->loadStory($feedItem,$feed);										}										else {											$this->db->log('No match:'.$itemTitle,$importLog);										}									break;								}															}													break;						case 'FeedMedia':							// flickr atom is rss where best image is in content//							echo 'title '.$itemTitle.'<br>';							// strip img tags for medium pics from itemDescription//							echo 'descrip <pre>'.$itemDescription.'</pre><br>';							$imgList=$this->_parsePageImages($itemDescription);//							var_dump($imgList);//							echo 'link:'.$itemLink.'<br>';							if ($enclosure = $item->get_enclosure())						    {							    // look up thumbnail							    switch ($spNotes) {							    	default:							    		// look for default image url							    		$mediaUrl=$this->db->safe($enclosure->link);								    	$imageUrl=$this->db->safe($enclosure->get_thumbnail());								    	$embed=$this->db->safe($enclosure->embed());//								         print_r($mediaUrl);//								         echo '<br />';//								         print_r($imageUrl);//								         echo '<br />';//								         var_dump ($embed);							        //								         echo '<br />';							    	break;							    	case 'inlineImage':							    		// feeds like Countdown that embed the thumbnail incorrectly							    		$embed=$enclosure->native_embed();							    		$link=$this->parseLink($embed);							    	break;								    }						    }							switch ($feed->specialType) {								case 'flickrContent':									$fmTable = new FeedMediaTable($this->db); 									$m = $fmTable->getRowObject();											$m->title=$itemTitle;									$m->author=$authorName;									$m->caption=nl2br(strip_tags($itemDescription));									$m->previewImageUrl=$imgList[0]['src'];									$m->linkUrl=$itemLink;									$m->imageUrl=$mediaUrl;									$m->numLikes=0;									$m->numComments=0;									$m->fbId=0;									$m->t=$itemDate;									$m->mediaType='image';									if (!$fmTable->isDup($m->linkUrl,$m->imageUrl) AND $m->imageUrl<>'') { 										switch ($feed->loadOptions) {											default:												if (!array_search($authorName,$this->authorList) OR $authorName=='') { 													// only use each flickr photographer/author once per fetch													$m->insert();															$this->authorList[]=$authorName;																		} 																				break;											case 'all': // load every image from this feed																						$m->insert();														$this->authorList[]=$authorName;																	break;										}																	}									break;							}						break;					}				}				$cnt+=1;				if ($cnt>25) break; // only do this many headlines			}		}	}	function stripit ( $url ) {  // taken from http://snipplr.com/view/12737/strip-url-to-domain-name/	   $url = trim($url);	   $url = preg_replace("/^(http:\/\/)*(www.)*/is", "", $url); 	   $url = preg_replace("/\/.*$/is" , "" ,$url); 	   return $url; 	}		function checkKeywords($title='',$description='') {		global $siteTopics;		if (!isset($siteTopics))			$siteTopics=array(SITE_TOPIC);		$haystack=$title.' '.$description;		foreach ($siteTopics as $needle) {			if (stristr($haystack,$needle)!==false) {				$this->db->log($needle.' FOUND in keywords',$importLog);				return true;			}		}		$this->db->log($needle.' not found in keywords',$importLog);		return false;	}		function checkMatches(&$feedItem=null) {		$url=$feedItem->url;		// check url domain against site's allowed rss feeds		if (is_null($this->feedDomainList)) {			// feedDomainList gets cached in script			$this->feedDomainList=array();			$q=$this->db->query("SELECT * FROM Feeds WHERE FIND_IN_SET(feedType,'wire,blog,allowed');");			while ($d=$this->db->readQ($q)) {				$feedDomain=parse_url($d->url,PHP_URL_HOST);				$this->db->log('parsed domain: '.$feedDomain.' => stripped to: '.$this->stripit($feedDomain),$importLog);				$this->feedDomainList[]=$this->stripit($feedDomain);			}		}		$domain=parse_url($url,PHP_URL_HOST);		if ($this->matchDomain($domain)!==false) return true;		$url=$this->get_final_url($url); // look for redirected url - slower		// update feedItem to new url		$feedItem->url=$url;		$domain2=parse_url($url,PHP_URL_HOST);		if ($this->matchDomain($domain2)!==false) return true;		return false; // no match			}		function matchDomain($needle='') {		$needle=$this->stripit($needle);		foreach ($this->feedDomainList as $haystack) {			if (stristr($haystack,$needle)!==false) {				$this->db->log($needle.' MATCHED in '.$haystack);				return true;			} else {				$this->db->log($needle.' not matched in '.$haystack);			}					}		return false;	}		function loadStory($wire=null,$feed=null) {		$this->db->log('entering loadStory ');		$this->db->log($wire);		// post a story from a feed to Content table for the user who owns the bookmark feed		$this->psObj->refreshUrl($wire->url);		// $id is feed id, $wire is serialized newswire object, $feed->userid is posted by userid		// clean headlines		$wire->title=$this->psObj->cleanTitle($wire->title);		$this->db->log('clean title:'.$wire->title);		// check for duplicates from final url or initial url or title		$error = false;		$cleanUrl=$this->psObj->cleanUrl($wire->url);		$isDup = $this->db->queryC("SELECT siteContentId FROM Content WHERE url = '".$wire->url."' OR url = '".$cleanUrl."' OR title = '".$wire->title."'");		if ($isDup===false) {			$wire->url=$cleanUrl;			$this->psObj->log('Cleaned url: '.$cleanUrl.' <= '.$wire->url);			// load user wire record			$this->db->log('not a dup');						require_once(PATH_CORE.'/classes/user.class.php');			$userTable 	= new UserTable($this->db);			$user = $userTable->getRowObject();			// to do if $feed->userid==0 use admin			if ($feed->userid==0) {				$user->loadWhere("isAdmin=1");			} else {				$user->load($feed->userid);			}			// create temporary content item, temp permalink			require_once(PATH_CORE.'/classes/utilities.class.php');			$utilObj=new utilities();			require_once(PATH_CORE.'/classes/content.class.php');			$cObj=new content($this->db);			// clean caption, strip tags, trim for length			$wire->caption=$utilObj->shorten($wire->caption,LENGTH_LONG_CAPTION);								$wire->source=$this->stripit(parse_url($wire->url,PHP_URL_HOST));			// create permalink				$wire->permalink=$cObj->buildPermalink($wire->title);			// get images, check size of each and pick most likely candidate with minimum			require_once(PATH_CORE.'/classes/remotefile.class.php');			$rfObj = new remotePageProperty($wire->url);			$imgArr=$this->psObj->parseImages($rfObj,7500); // 7500 is min jpg size for automatically selecting images			// $this->db->log($imgArr);			if (count($imgArr)>0) {				$wire->imageUrl=$imgArr[0];			} else {				$wire->imageUrl='';			}			// serialize the content			$isBlogEntry=0;$story=$cObj->serialize(0,$wire->title,$wire->caption,$wire->source,$wire->url,$wire->permalink,$user->ncUid,$user->name,$user->userid,'',1,0,0,$wire->imageUrl,0,$isBlogEntry,1);		//$this->db->log($story);		// add to content by this userid			$siteContentId=$cObj->add($story);					if ($siteContentId!==false) {				require_once(PATH_CORE.'/classes/log.class.php');				$this->logObj=new log($this->db);													// add to user journal				$logItem=$this->logObj->serialize(0,$user->userid,'postStory',$siteContentId);				$inLog=$this->logObj->update($logItem);				if ($inLog) {					$logItem=$this->logObj->serialize(0,$user->userid,'vote',$siteContentId);					$inLog=$this->logObj->update($logItem);				}			} 			// set new story loaded flag - so that features can be updated			$this->newStoryLoaded=true;		} else {			$error=true;		}	}		// taken from remotefile.class.php	function _parsePageImages($str)	// returns a nested array of page images, with attributes 	// urls will need to be cleaned up by another function, hence: _private	{		$images = array();		$stickem = array();		// regex finds image elements		// BUG: IS CASE-SENSITIVE - note jr, ius it? /i should be insensitive		preg_match_all("/<img([^>]+)/i", $str, $matches);		foreach ($matches[1] as $key => $val) {			// regex finds 'attribute=value'			preg_match_all("/([\w]+)=([^\s]+)/i", $val, $att_matches);			foreach ($att_matches[1] as $key => $attribute) {				$stickem[$attribute] = $this->cleanQuotes($att_matches[2][$key]); // that last ugly is the value			}			// only count it if the 'src' attribute is set			if (isset($stickem['src'])) {				$images[] = $stickem;			}		}		return $images;	}		// taken from remotefile.class.php	function cleanQuotes($string) 	{		return trim(trim(trim($string), "'"), '"'); 	}			function parseLink($str) {		preg_match('/href="([^\"]+)"/i', $str, $matches);		if ($matches) {			return $matches[1];		} else { 			return false;		}		}			// deprecated 	function syncFeedList($feedList=NULL) {		// serialize it		$rxFeedList=array();		foreach ($feedList as $feed) {			// update or add the feed			$info=$this->serialize($feed[blogtitle],$feed[url],$feed[rss],$feed[blogid],$feed[blogtype]);			$this->add($info);			$rxFeedList[]=$feed[blogid];		}	}		// Taken from http://w-shadow.com/blog/2008/07/05/how-to-get-redirect-url-in-php/		/**	 * get_redirect_url()	 * Gets the address that the provided URL redirects to,	 * or FALSE if there's no redirect. 	 *	 * @param string $url	 * @return string	 */	function get_redirect_url($url){		$redirect_url = null; 		$url_parts = @parse_url($url);		if (!$url_parts) return false;		if (!isset($url_parts['host'])) return false; //can't process relative URLs		if (!isset($url_parts['path'])) $url_parts['path'] = '/';		$sock = fsockopen($url_parts['host'], (isset($url_parts['port']) ? (int)$url_parts['port'] : 80), $errno, $errstr, 30);		if (!$sock) return false;		$request = "HEAD " . $url_parts['path'] . (isset($url_parts['query']) ? '?'.$url_parts['query'] : '') . " HTTP/1.1\r\n"; 		$request .= 'Host: ' . $url_parts['host'] . "\r\n"; 		$request .= "Connection: Close\r\n\r\n"; 		fwrite($sock, $request);		$response = '';		while(!feof($sock)) $response .= fread($sock, 8192);		fclose($sock);		if (preg_match('/^Location: (.+?)$/m', $response, $matches)){			return trim($matches[1]);		} else {			return false;		}	}	/**	 * get_all_redirects()	 * Follows and collects all redirects, in order, for the given URL. 	 *	 * @param string $url	 * @return array	 */	function get_all_redirects($url){		$redirects = array();		while ($newurl = $this->get_redirect_url($url)){			if (in_array($newurl, $redirects)){				break;			}			$redirects[] = $newurl;			$url = $newurl;		}		return $redirects;	}	/**	 * get_final_url()	 * Gets the address that the URL ultimately leads to. 	 * Returns $url itself if it isn't a redirect.	 *	 * @param string $url	 * @return string	 */	function get_final_url($url){		$redirects = $this->get_all_redirects($url);		if (count($redirects)>0){			return array_pop($redirects);		} else {			return $url;		}	}		}	?>