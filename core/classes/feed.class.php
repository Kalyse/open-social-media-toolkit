<?phpclass feed {		var $db;	var $nwObj;			function feed(&$db=NULL) {		if (is_null($db)) { 			require_once('db.class.php');			$this->db=new cloudDatabase();		} else			$this->db=$db;	}	function getFeed($id=0) {		$result=$this->db->query("SELECT * FROM Newswire WHERE id=$id;");		$info=$this->db->readQ($result);		return $info;		}		function syncFeedList($feedList=NULL) {		// serialize it		$rxFeedList=array();		foreach ($feedList as $feed) {			// update or add the feed			$info=$this->serialize($feed[blogtitle],$feed[url],$feed[rss],$feed[blogid],$feed[blogtype]);			$this->add($info);			$rxFeedList[]=$feed[blogid];		}		/*		if (count($feedList)>0) {			// delete missing feeds			$feedStrList=implode(',',$rxFeedList);			$this->db->delete("Feeds","NOT FIND_IN_SET(wireid,'$feedStrList')");		}		*/	}	function add($feed) {		// check for duplicate		$chkDup=$this->db->queryC("SELECT id FROM Feeds WHERE rss='$feed->rss' OR wireid=$feed->wireid;");		if (!$chkDup) {			// insert the feed into the table			$this_query=$this->db->insert("Feeds","title,url,rss,wireid,feedType","'$feed->title','$feed->url','$feed->rss',$feed->wireid,'$feed->feedType'");			$newId=$this->db->getId();			return $newId;			} else 			return false;	}		function serialize($title='',$url='',$rss='',$wireid=0,$feedType='blog') {		// creates an object for an action		$data= new stdClass;		$data->title=$this->db->safe($title);				$data->url=$url;		$data->rss=$rss;				$data->wireid=$wireid;		$data->feedType=$feedType;		return $data;	}		function fetchFeeds() {		require_once('newswire.class.php');		$this->nwObj=new newswire($this->db);		$this_query=$this->db->query("SELECT * FROM Feeds WHERE feedType='blog' ORDER BY lastFetch ASC;");		while ($feed=$this->db->readQ($this_query)) {			echo $feed->title.'<br />';			$this->simpleProcessFeed($feed);			$this->db->update("Feeds","nextFetch=date_sub(NOW(), INTERVAL (0-15) MINUTE)","id=$feed->id");		}							}	function simpleProcessFeed($feed=NULL) {		// process feed with simple pie		require_once PATH_CORE.'/utilities/simplepie.inc';		// Create a new instance of the SimplePie object		$sp = new SimplePie();		$sp->set_feed_url($feed->url);		$sp->set_cache_location(PATH_CACHE);		$success = $sp->init();		$sp->handle_content_type();		if ($success) {						echo '<h2>'.$sp->get_title().'</h2><br />';			// set up a feedTime as a backup for feeds without dates in them			$spTime=time();			$cnt=0; // count headlines in feed								foreach ($sp->get_items() as $item) {				$spTime=$spTime-(60*15); // go fifteen minutes back for each feed item					 												// clean up brand labels				$itemTitle=$item->get_title();				$itemDescription=$item->get_content();				// get the date				$itemDate=$item->get_date('Y-m-d H:i:s'); 				if ($itemDate=='') $itemDate=date('Y-m-d H:i:s',$spTime);				$itemLink=$item->get_permalink();								// skip open threads				if (stristr($itemTitle,'open thread')===FALSE) {											$feedItem=$this->nwObj->serialize($itemTitle,$itemDescription,$feed->title,$itemLink,$itemDate,$feed->wireid,'blog');					$id=$this->nwObj->add($feedItem);																			if ($id!==false) {						echo 'insert '.$itemTitle.'<br>';						if ($enclosure = $item->get_enclosure())					    {						    // look up thumbnail						    switch ($spNotes) {						    	default:						    		// look for default image url						    		$mediaUrl=$this->db->safe($enclosure->link);							    	$imageUrl=$this->db->safe($enclosure->get_thumbnail());							    	$embed=$this->db->safe($enclosure->embed());							         print_r($mediaUrl);							         echo '<br />';							         print_r($imageUrl);							         echo '<br />';							         var_dump ($embed);							        							         echo '<br />';							         $this->db->update("Newswire","imageUrl='$imageUrl',mediaUrl='$mediaUrl',embed='$embed'","id=$id");						    	break;						    	case 'inlineImage':						    		// feeds like Countdown that embed the thumbnail incorrectly						    		$embed=$enclosure->native_embed();						    		$link=$this->parseLink($embed);							         $this->db->update("Newswire","imageUrl='$link'","id=$id");						    	break;							    }					    }				    }				} else					echo 'Skip open thread: '.$itemTitle.'<br />';				$cnt+=1;				if ($cnt>25) break; // only do this many headlines			}		}	}			function parseLink($str) {		preg_match('/href="([^\"]+)"/i', $str, $matches);		if ($matches) {			return $matches[1];		} else { 			return false;		}		}		}	?>